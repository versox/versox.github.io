{"version":3,"sources":["assets/header_bg.jpeg","assets/keyboard_and_mouse.png","assets/solder.jpeg","assets/wires.jpeg","assets/schematic.png","assets/data.png","assets/final.jpeg","App.js","index.js"],"names":["App","className","src","headerBg","keyboardAndMouse","style","marginBottom","href","width","height","frameborder","allow","allowfullscreen","solder","wires","float","schematic","marginTop","gist","dataPNG","wrapperClass","contentClass","finalJPG","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAAe,G,MAAA,IAA0B,wCCA1B,MAA0B,+CCA1B,MAA0B,oCCA1B,MAA0B,mCCA1B,MAA0B,sCCA1B,MAA0B,iCCA1B,MAA0B,mC,wBCiF1BA,MArEf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKC,IAAKC,EAAUF,UAAU,cAC9B,sBAAKA,UAAU,aAAf,UACE,wCACA,sDAGJ,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,gBAAf,iIACA,sBAAKA,UAAU,UAAf,UACE,6CACA,sVACA,qBAAKC,IAAKE,EAAkBC,MAAO,CAACC,aAAc,SAClD,iRACA,2KAA6I,mBAAGC,KAAK,+CAAR,4BAA7I,gOAEF,sBAAKN,UAAU,UAAf,UACE,sCACA,qBAAKA,UAAU,iBAAf,SACE,wBAAQO,MAAM,OAAOC,OAAO,OAAOP,IAAI,4CAA4CQ,YAAY,IAAIC,MAAM,2FAA2FC,iBAAe,SAGvN,sBAAKX,UAAU,UAAf,UACE,iDACA,2OACA,mKAAqI,mBAAGM,KAAK,sDAAR,8BAArI,0HACA,wHAA0F,mBAAGA,KAAK,2DAAR,+BAA1F,gDAA+N,mBAAGA,KAAK,gDAAR,0DAA/N,0DAA8X,mBAAGA,KAAK,0CAAR,gCAA9X,gKAAmmB,mBAAGA,KAAK,gDAAR,gDAAnmB,QACA,0CACA,4OACA,qBAAKL,IAAKW,EAAQR,MAAO,CAACG,MAAO,SACjC,qBAAKN,IAAKY,EAAOT,MAAO,CAACU,MAAO,QAASP,MAAO,SAChD,gNACA,qBAAKN,IAAKc,EAAWX,MAAO,CAACY,UAAW,MAAOX,aAAc,SAC7D,0CACA,qQACA,cAAC,IAAD,CAAgBY,KAAK,4CACrB,gHACA,qBAAKhB,IAAKiB,IACV,qTACA,cAAC,IAAD,CAAgBD,KAAK,0CAA0CE,aAAa,eAAeC,aAAa,iBACxG,sEAAwC,mBAAGd,KAAK,mCAAR,iDACxC,gDACA,6EAA+C,8CAA/C,aACA,gNACA,+BACE,4HACA,oFACA,qJAEF,sXACA,+BACE,8GACA,6GACA,mPACA,gIAEF,kPACA,6CACA,iOACA,qBAAKL,IAAKoB,cCrEpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.59071f71.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/header_bg.7c9c92e8.jpeg\";","export default __webpack_public_path__ + \"static/media/keyboard_and_mouse.5a2fd94e.png\";","export default __webpack_public_path__ + \"static/media/solder.74f6ce93.jpeg\";","export default __webpack_public_path__ + \"static/media/wires.28deb87e.jpeg\";","export default __webpack_public_path__ + \"static/media/schematic.29466999.png\";","export default __webpack_public_path__ + \"static/media/data.e5e35049.png\";","export default __webpack_public_path__ + \"static/media/final.bb9db4bb.jpeg\";","import headerBg from './assets/header_bg.jpeg';\nimport keyboardAndMouse from './assets/keyboard_and_mouse.png';\nimport solder from './assets/solder.jpeg';\nimport wires from './assets/wires.jpeg';\nimport schematic from './assets/schematic.png';\nimport dataPNG from './assets/data.png';\nimport finalJPG from './assets/final.jpeg';\nimport './App.scss';\n\nimport ReactEmbedGist from 'react-embed-gist';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <img src={headerBg} className=\"header_bg\"/>\n        <div className=\"header_bar\">\n          <h1>Copper</h1>\n          <h2>by Carson Cass</h2>\n        </div>\n      </div>\n      <div className=\"body\">\n        <div className=\"body_synopsis\">A spatial based input mechanism in which the positions of copper balls are used to express location and relativity.</div>\n        <div className=\"section\">\n          <h2>Inspiration</h2>\n          <p>Many different mechanisms exist for providing input to our computers. From speech, cameras and touchscreens, to the oh-so familiar keyboard and mouse, it seems there's a device for almost every input method. Yet, they all seem to lack one feature, the ability to maintain spatial awareness of your input data.</p>\n          <img src={keyboardAndMouse} style={{marginBottom: '1em'}}></img>\n          <p>Yes, it's true that some input devices can track motion. Cameras are able to monitor a user's hand positions, and accelerometers are able to detect the movement of a device. However, lacking spatial feedback, these devices are hard to feel.</p>\n          <p>As humans, we have the ability to know where our bodies are relative to our surroundings. This \"sixth sense\" as some call it, is known as <a href=\"https://en.wikipedia.org/wiki/Proprioception\">proprioception</a>. Knowing where our bodies are relative to our surroundings seems to imply that we also know where our surroundings are relative to our bodies. This idea of feeling the world is what I wanted to explore with Copper.</p>\n        </div>\n        <div className=\"section\">\n          <h2>Demo</h2>\n          <div className=\"videoContainer\">\n            <iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/zOlOb2r4u6o\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n          </div>\n        </div>\n        <div className=\"section\">\n          <h2>How it was made</h2>\n          <p>Attaching 16 copper tape switches to an old boardgame base and then using an arduino and Kobo Aura H2O reader, Copper was born. As the Kobo hack was the most difficult part, we will talk about it first.</p>\n          <p>\"Hacking\" a Kobo is surprisingly easy, there are plenty of guides for how to \"hack\" a Kobo and get shell access, for example: the <a href=\"https://wiki.mobileread.com/wiki/Kobo_Touch_Hacking\">Mobile Read Wiki</a>. However, these guides only get you in the door, making something once you are in requires much more investigation.</p>\n          <p>In the case of this project, it involved reading lots of random unrelated posts on the <a href=\"https://www.mobileread.com/forums/forumdisplay.php?f=247\">MobileRead forums</a>, learning about hardware from a guide about <a href=\"http://gethighstayhigh.co.uk/kobo-self-build/\">setting up Kobo as an XCSoar flight computer</a>, and then many painful hours of trying to compile the <a href=\"https://github.com/kobolabs/Kobo-Reader\">Kobo linux sources</a> using documentation that was 10 years old. Finally, there was some really good information about building QT Applications for the Kobo in the readme of the <a href=\"https://github.com/Rain92/UltimateMangaReader\">UltimateMangaReader github project</a>. </p> \n          <h3>Hardware</h3>\n          <p>The Kobo Aura H2O has three serial ports but only one is actually usable. I opened the reader, disconnected the battery and soldered wires to the usable port that is located on the top left of the board.</p>\n          <img src={solder} style={{width: '50%'}}/>\n          <img src={wires} style={{float: 'right', width: '50%'}}/>\n          <p>This was then connected to pins 2 and 3 of the arduino, and the arduino wired up to the switches using pull-down resistors to keep the outputs low while balls are not present.</p>\n          <img src={schematic} style={{marginTop: '1em', marginBottom: '1em'}}/>\n          <h3>Software</h3>\n          <p>The arduino code is responsible for reading the switches and updating the Kobo over serial. It does this by looping through each switch, determining if it needs to send a update, then sending a batch update using SoftwareSerial.</p>\n          <ReactEmbedGist gist='versox/2e3b81dcc57eb99c360730afa02a9fc5' />\n          <p>The data is sent as a string of 1s and 0s that represent which switches are on.</p>\n          <img src={dataPNG}/>\n          <p>To receive this data, the Kobo runs a QT5 application that reads the serial data from /dev/ttymxc0 (this is the device that linux maps to the serial port). After reading the data it will determine whether to draw a shape or fill in the grid based on the programs current mode.</p>\n          <ReactEmbedGist gist='versox/16704e39debb0e7605d03fdbb7e69ac8' wrapperClass='gist_wrapper' contentClass='gist_content'/>\n          <p>The full source code can be found on <a href=\"https://github.com/versox/copper\">https://github.com/versox/copper</a></p>\n          <h3>Serial Problem</h3>\n          <p>This all sounded great in concept.... but a <b>major problem</b> arose!</p>\n          <p>The serial port of the Kobo was never meant to connect to an arduino. It had it's own purpose allowing developers to debug the device. Pursueing it's purpose, the serial port:</p>\n          <ol>\n            <li>was configured for a different baudrate than the arudino communicates at. (115200 vs 9600)</li>\n            <li>was used by various pieces of the system software.</li>\n            <li>had the ability to change it's baudrate to 9600, but everything else using the serial port would change it back!</li>\n          </ol>\n          <p>To solve this problem: every part of the system that interacted with the serial port had to be changed. Luckily, Kobo runs linux and the Kobo company is cool enough to share their sources publically. As linux is very configurable, the once impossible looking problem became very approachable. To disable the serial port, I did the following:</p>\n          <ul>\n            <li>Disable getty, a program that allows users to login to the Kobo over serial.</li>\n            <li>Recompile the linux kernel with console output to the serial port disabled.</li>\n            <li>The configuration option we just changed in the kernel above... It's also being set at boot time by the boot loader. So if you actually want it to change... We will need to recompile the boot loader as well :P</li>\n            <li>Get your program to manually set the baudrate to 9600 every time it launches. Just in case.</li>\n          </ul>\n          <p>Yay! Now the Kobo can freely talk with it's new friend, the arduino. The steps above are just a summary, if you are reading this and are interested in more details, feel free to email me: cass.carson@gmail.com</p>\n          <h2>Wrapping up</h2>\n          <p>This project was extremely fun to work on. The tangible media course (RTA 321) at Ryerson is a great exploration of making art through technology, would definitely reccommend it. Thanks Steve!</p>\n          <img src={finalJPG}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}